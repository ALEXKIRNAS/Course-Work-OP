#include "GradientDescent.h";
#include "DetermineCalc.h"

/******************************************
*		‘ункц≥€ визначенн€ того чи Ї	  *
*		матриц€ симетричною				  *
*	ѕараметри:							  *
*	matrix - матриц€€ку необх≥дно		  *
*				перев≥рити				  *
*	n - розм≥рн≥сть матриц≥				  *
******************************************/
bool isSemetric(double** matrix, const int& n) {
	for (int i = 0; i < n; i++)
		for (int z = i + 1; z < n; z++)
			// якщо матриц€ не симетрична
			if (matrix[i][z] != matrix[z][i]) return false;
	return true;
}

/******************************************
*		‘ункц≥€ визначенн€ того чи Ї	  *
*		матриц€ додатньовизначеною		  *
*	ѕараметри:							  *
*	matrix - матриц€€ку необх≥дно		  *
*				перев≥рити				  *
*	n - розм≥рн≥сть матриц≥				  *
******************************************/
bool isPositive(double** matrix, const int& n) {
	//  ористуЇмос€ критер≥Їм —ильвестра
	for (int i = 1; i <= n; i++) {

		double** cut = new double* [i]; //  утовий м≥нор розм≥ру i X i

		// «аповнюЇмо матрицю кутового м≥нора
		for (int z = 0; z < i; z++) {
			cut[z] = new double[i];
			for (int j = 0; j < i; j++) cut[z][j] = matrix[z][j];
		}

		// якщо визначник кутового м≥нору не Ї додатньою, то матриц€ не Ї додатньовизначеною
		if (det(cut, i) <= 0) return false;
	}

	return true;
}


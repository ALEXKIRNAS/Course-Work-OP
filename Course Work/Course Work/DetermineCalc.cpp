#include "DetermineCalc.h"

/******************************************
*		Функція обчислення визначника	  *
*	Параметри:							  *
*	matrix - матриця для якої потірбно	  *
*		  порахувати визначник			  *
*	n - розмірність матриці				  *
******************************************/
int det(int** matrix, int n){
	int determine = 0; // Визначник матриці matrix

	// Якщо розмірність матриці відмінна від одиниці
	if (n != 1) {
		// То, обчислюємо визначник розкладном за першим стовпцем (як сума алгебраїчних доповнень до 1-го рядка)
		for (int z = 0; z < n; z++) 
			determine += AlgebralAdditionCalc(matrix, n, z) * matrix[0][z];
	}
	// Інакше повернути визначник матриці 1х1
	else return **matrix;

	return determine;
}

/******************************************
*		Функція обчислення алгебраїчного  *
*		доповнення заданого елементу	  *
*	Параметри:							  *
*	matrix - матриця для якої потірбно	  *
*		  алгебраїний мінор				  *
*	n - розмірність матриці				  *
*	y - номер стовпця елемента, для		  *
*		якого потрібно порахувати		  *
*		алгебраїний мінор				  *
******************************************/
int AlgebralAdditionCalc(int** matrix, const int& n, const int& y) {
	return det(matrixCut(matrix, n, y), n - 1) * ( y&1 ? -1 : 1);
}

/******************************************
*		Функція  уворення матриці		  *
*		(N-1)-го порядку				  *
*	Параметри:							  *
*	matrix - матриця для якої потірбно	  *
*		  алгебраїний мінор				  *
*	n - розмірність матриці				  *
*	y - номер стовпця елемента, для		  *
*		якого потрібно порахувати		  *
*		алгебраїний мінор				  *
******************************************/
int** matrixCut(int** matrix, const int& n, const int& y) {

	// Cтворюємо нову матрицю
	int** newMatrix = new int*[n - 1];
	for (int i = 0; i < n - 1; i++) newMatrix[i] = new int[n - 1];

	int index = 0; // Абсолютний індекс елемента в матриці newMatrix

	// Заповнюємо матрицю
	for (int i = 1; i < n; i++)
		for (int z = 0; z < n; z++)
			if (z == y) continue;
			else {
				newMatrix[index / (n - 1)][index % (n - 1)] = matrix[i][z];
				index++;
			}

	return newMatrix;
}